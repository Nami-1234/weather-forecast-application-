{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95cc97f8-7e14-4c49-b15a-e6f118e625aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f57f54fb-41c6-45bb-9d66-bad59c968870",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('weather12 - Sheet1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "48d49e6d-ac5a-4bc9-8519-937eb8dece10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "      <th>Sun Rise</th>\n",
       "      <th>Sun Set</th>\n",
       "      <th>Weather</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01-05-2024</td>\n",
       "      <td>36</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>5:58</td>\n",
       "      <td>18:34</td>\n",
       "      <td>some clouds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02-05-2024</td>\n",
       "      <td>30</td>\n",
       "      <td>44</td>\n",
       "      <td>0.1</td>\n",
       "      <td>15</td>\n",
       "      <td>5:58</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Clear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03-05-2024</td>\n",
       "      <td>33</td>\n",
       "      <td>33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>some clouds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04-05-2024</td>\n",
       "      <td>30</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Clear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05-05-2024</td>\n",
       "      <td>34</td>\n",
       "      <td>21</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>06-05-2024</td>\n",
       "      <td>34</td>\n",
       "      <td>32</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>07-05-2024</td>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>1.5</td>\n",
       "      <td>5</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:36</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>08-05-2024</td>\n",
       "      <td>32</td>\n",
       "      <td>54</td>\n",
       "      <td>1.3</td>\n",
       "      <td>10</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:36</td>\n",
       "      <td>Rain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>09-05-2024</td>\n",
       "      <td>31</td>\n",
       "      <td>34</td>\n",
       "      <td>0.4</td>\n",
       "      <td>10</td>\n",
       "      <td>5:54</td>\n",
       "      <td>18:36</td>\n",
       "      <td>Rain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10-05-2024</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>0.8</td>\n",
       "      <td>10</td>\n",
       "      <td>5:54</td>\n",
       "      <td>18:36</td>\n",
       "      <td>some clouds</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Temperature  Humidity  Rainfall Probability (in %)  \\\n",
       "0  01-05-2024           36        32                          0.0   \n",
       "1  02-05-2024           30        44                          0.1   \n",
       "2  03-05-2024           33        33                          0.0   \n",
       "3  04-05-2024           30        24                          0.0   \n",
       "4  05-05-2024           34        21                          0.0   \n",
       "5  06-05-2024           34        32                          1.2   \n",
       "6  07-05-2024           31        48                          1.5   \n",
       "7  08-05-2024           32        54                          1.3   \n",
       "8  09-05-2024           31        34                          0.4   \n",
       "9  10-05-2024           32        40                          0.8   \n",
       "\n",
       "   Wind Speed(kmph) Sun Rise Sun Set      Weather  \n",
       "0                 8     5:58   18:34  some clouds  \n",
       "1                15     5:58   18:35        Clear  \n",
       "2                10     5:56   18:35  some clouds  \n",
       "3                15     5:56   18:35        Clear  \n",
       "4                10     5:56   18:35       Cloudy  \n",
       "5                10     5:56   18:35       Cloudy  \n",
       "6                 5     5:56   18:36       Cloudy  \n",
       "7                10     5:56   18:36         Rain  \n",
       "8                10     5:54   18:36         Rain  \n",
       "9                10     5:54   18:36  some clouds  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "87c42adc-43a6-4953-b0d1-a5dab2e11f09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 8)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "98d39eaa-e76c-42d8-9034-11c3d47468c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "      <th>Sun Rise</th>\n",
       "      <th>Sun Set</th>\n",
       "      <th>Weather</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01-05-2024</td>\n",
       "      <td>36</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>5:58</td>\n",
       "      <td>18:34</td>\n",
       "      <td>some clouds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02-05-2024</td>\n",
       "      <td>30</td>\n",
       "      <td>44</td>\n",
       "      <td>0.1</td>\n",
       "      <td>15</td>\n",
       "      <td>5:58</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Clear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03-05-2024</td>\n",
       "      <td>33</td>\n",
       "      <td>33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>some clouds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04-05-2024</td>\n",
       "      <td>30</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Clear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05-05-2024</td>\n",
       "      <td>34</td>\n",
       "      <td>21</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>5:56</td>\n",
       "      <td>18:35</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Temperature  Humidity  Rainfall Probability (in %)  \\\n",
       "0  01-05-2024           36        32                          0.0   \n",
       "1  02-05-2024           30        44                          0.1   \n",
       "2  03-05-2024           33        33                          0.0   \n",
       "3  04-05-2024           30        24                          0.0   \n",
       "4  05-05-2024           34        21                          0.0   \n",
       "\n",
       "   Wind Speed(kmph) Sun Rise Sun Set      Weather  \n",
       "0                 8     5:58   18:34  some clouds  \n",
       "1                15     5:58   18:35        Clear  \n",
       "2                10     5:56   18:35  some clouds  \n",
       "3                15     5:56   18:35        Clear  \n",
       "4                10     5:56   18:35       Cloudy  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3d11ae9a-ebf6-4a90-bb44-02c8ab8913a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Weather\n",
       "some clouds    3\n",
       "Cloudy         3\n",
       "Clear          2\n",
       "Rain           2\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Weather.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fe63f63b-6832-46b0-9c41-452a6d626fda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "      <th>Sun Rise</th>\n",
       "      <th>Sun Set</th>\n",
       "      <th>Weather</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Date, Temperature, Humidity, Rainfall Probability (in %), Wind Speed(kmph), Sun Rise, Sun Set, Weather]\n",
       "Index: []"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d97f33e5-808e-4b8f-a925-ff0bbb43d562",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date                           0\n",
       "Temperature                    0\n",
       "Humidity                       0\n",
       "Rainfall Probability (in %)    0\n",
       "Wind Speed(kmph)               0\n",
       "Sun Rise                       0\n",
       "Sun Set                        0\n",
       "Weather                        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ae1a5269-4d3f-49ee-b082-5d75c6ee7858",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date                            object\n",
       "Temperature                      int64\n",
       "Humidity                         int64\n",
       "Rainfall Probability (in %)    float64\n",
       "Wind Speed(kmph)                 int64\n",
       "Sun Rise                        object\n",
       "Sun Set                         object\n",
       "Weather                         object\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4f6032e6-bdf6-430d-ade2-6c730f0525a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>32.300000</td>\n",
       "      <td>36.200000</td>\n",
       "      <td>0.530000</td>\n",
       "      <td>10.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.946507</td>\n",
       "      <td>10.336559</td>\n",
       "      <td>0.612917</td>\n",
       "      <td>2.945807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>32.000000</td>\n",
       "      <td>33.500000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>33.750000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Temperature   Humidity  Rainfall Probability (in %)  Wind Speed(kmph)\n",
       "count    10.000000  10.000000                    10.000000         10.000000\n",
       "mean     32.300000  36.200000                     0.530000         10.300000\n",
       "std       1.946507  10.336559                     0.612917          2.945807\n",
       "min      30.000000  21.000000                     0.000000          5.000000\n",
       "25%      31.000000  32.000000                     0.000000         10.000000\n",
       "50%      32.000000  33.500000                     0.250000         10.000000\n",
       "75%      33.750000  43.000000                     1.100000         10.000000\n",
       "max      36.000000  54.000000                     1.500000         15.000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "98b47bc9-a866-44df-84c9-937088d12b2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = ['Temperature', 'Humidity', 'Rainfall Probability (in %)', 'Wind Speed(kmph)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1be47fee-c8fd-4da3-824c-5bc6ec8de826",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Temperature</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.329133</td>\n",
       "      <td>-0.120141</td>\n",
       "      <td>-0.463122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Humidity</th>\n",
       "      <td>-0.329133</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.679422</td>\n",
       "      <td>-0.264919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <td>-0.120141</td>\n",
       "      <td>0.679422</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.528622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "      <td>-0.463122</td>\n",
       "      <td>-0.264919</td>\n",
       "      <td>-0.528622</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Temperature  Humidity  \\\n",
       "Temperature                     1.000000 -0.329133   \n",
       "Humidity                       -0.329133  1.000000   \n",
       "Rainfall Probability (in %)    -0.120141  0.679422   \n",
       "Wind Speed(kmph)               -0.463122 -0.264919   \n",
       "\n",
       "                             Rainfall Probability (in %)  Wind Speed(kmph)  \n",
       "Temperature                                    -0.120141         -0.463122  \n",
       "Humidity                                        0.679422         -0.264919  \n",
       "Rainfall Probability (in %)                     1.000000         -0.528622  \n",
       "Wind Speed(kmph)                               -0.528622          1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor_matrix = data[cols].corr()\n",
    "cor_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b8f21c6-fd72-4e39-90f7-5046078bf73c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(cor_matrix, annot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e4299fbc-7590-4b9e-aa71-dda675745d1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Temperature', 'Humidity', 'Rainfall Probability (in %)',\n",
       "       'Wind Speed(kmph)', 'Sun Rise', 'Sun Set', 'Weather'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "61e6caea-616f-4ea7-9e9a-bc81f9f64178",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Temperature'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a7e4b2e0-4d9b-459d-848e-7f3e835d164c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Humidity'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d7022192-ef87-4f4f-8b85-aa3698887344",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Rainfall Probability (in %)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "aecd3dda-42b4-4a8f-b5cb-e0281b6b660c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "12cb568b-9ea4-472b-96e7-c79eac0b2431",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f7682259-2d74-4e25-a668-d1b545ed012f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1b146dee-1d45-42a2-aef8-18929d4745eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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B4DOi79aDUDihlMAAGAY8QEAAIwiPgAYExoaqoceekihoaGBHgVAAHHPBwAAMIozHwAAwCjiAwAAGEV8AAAAo4gPoJ0rLCyUzWbTkSNHzuk4U6ZMUVpaml9mCoSUlBTde++9Put27dqlmJgY7zcjr1q1Sj179jQ/nKR+/fppyZIlp9z+3Xff6fzzz9c333xjbiignSI+AEOee+45RUREqKGhwbuupqZG3bp1U0pKis++zcFRVlamESNGqLKy8oxfV+wPK1euVFJSksLDw9WzZ08NHTpUOTk5bf66P1Z2drbuueceRUREBHqUM+rdu7cmT56shx56KNCjAAFHfACGuN1u1dTUaPv27d51RUVFiomJ0datW3Xs2DHv+oKCAsXFxal///4KCQlRTExMm/+5geeff1733nuvpk+frp07d+qDDz5QVlaWampq2vR1f6x9+/YpPz9fU6ZMCfQoZ+2WW27RK6+8okOHDgV6FCCgiA/AkIEDB8rpdKqwsNC7rrCwUDfccIPi4+O1ZcsWn/Vut9v7zz+87NJ8aWHDhg0aNGiQwsPDdd1116mystL7/MbGRs2cOVM9e/ZUVFSUsrKyzviXJl9//XVNmDBBU6dOVUJCggYPHqz09HQ99thj3n2aL93MmzdPffr0UWRkpO644w4dP37cu09TU5NycnIUHx+vsLAwJSUlad26dT6vVVJSotTUVIWHhys6OlqTJk3Sd999591eW1uryZMnKzw8XE6nU4sXLz5p3ldffVVJSUm64IILTvkz/fvf/9awYcN04403qr6+3vu73LBhg4YOHaqwsDCNGjVKBw8e1JtvvqlBgwYpMjJSEydOVF1dnfc4KSkpuvvuu3X33XfL4XCod+/emjt37km/07q6Ot16662KiIhQXFycVqxY4bN98ODBio2N1fr160/77wLo7IgPwCC3262CggLvckFBgVJSUjRy5Ejv+qNHj2rr1q3e+GhJXV2dFi1apJdeekmbNm3Svn37dN9993m3L168WKtWrdLzzz+v999/X4cOHTrjG15MTIy2bNmivXv3nna/jRs36vPPP1dhYaHWrl2r3NxczZs3z7s9JydHL774op577jl9+umnyszM1M0336z33ntPknTkyBGNGjVKQ4cO1fbt2/XWW2/pwIEDmjBhgvcYs2fP1nvvvafXXntNb7/9tgoLC7Vjxw6fOYqKijRs2LBTzlleXq7k5GQNGTJE69at8/lis4cffljPPPOMNm/erPLyck2YMEFLlizRmjVr9MYbb+jtt9/W0qVLfY63evVq2e12ffjhh3r66af15JNP6m9/+5vPPosXL9awYcP08ccfa9q0abrzzju1a9cun32uuOIKFRUVnfZ3DHR6FgBjVq5cafXo0cM6ceKE5fF4LLvdbh08eNBas2aNdc0111iWZVkbN260JFl79+61LMuyCgoKLEnW4cOHLcuyrBdeeMGSZJWWlnqPu2zZMis6Otq77HQ6rYULF3qXT5w4YfXt29e64YYbTjlbRUWFddVVV1mSrIsvvtjKyMiw/vGPf1iNjY3efTIyMqxevXpZtbW13nXLly+3wsPDrcbGRuvYsWNW9+7drc2bN/sce+rUqVZ6erplWZY1f/5869prr/XZXl5ebkmydu3aZVVXV1shISHWq6++6t3+/fffW2FhYdaMGTO865KSkqxHHnnE5zgvvPCC5XA4rC+++MJyuVzW9OnTraamJu/25t/lO++8412Xk5NjSbLKysq8626//XZrzJgx3uWRI0dagwYN8jnWnDlzrEGDBnmXL7zwQuvmm2/2Ljc1NVnnn3++tXz5cp8ZMzMzrZSUFAvoyjjzARiUkpKi2tpabdu2TUVFRbr44ovVp08fjRw50nvfR2FhoS666CLFxcWd8jjdu3dX//79vctOp1MHDx6UJFVVVamyslJXXnmld7vdbj/tWYLmYxQXF+tf//qXZsyYoYaGBmVkZOi6665TU1OTd7+kpCR1797duzx8+HDV1NSovLxcpaWlqqur069+9SuFh4d7Hy+++KLKysokSZ988okKCgp8tl9yySWSpLKyMpWVlen48eM+8/fq1UsDBw70mffo0aM677zzTvo5jh49quTkZI0bN05PP/10i/fK/PSnP/X+c3R0tLp3766LLrrIZ13z77PZVVdd5XOs4cOHa/fu3WpsbGzxuDabTTExMScdJywszOeSDtAV2QM9ANCVJCQkqG/fviooKNDhw4c1cuRISVJsbKxcLpc2b96sgoICjRo16rTH6datm8+yzWY74z0dZ2vIkCEaMmSIpk2bpjvuuEPJycl67733TnsZqFnzzalvvPHGSfdiNF/2qKmp0dixY7VgwYKTnu90OlVaWnpWc/bu3VuHDx8+aX1oaKhGjx6t/Px8zZ49u8V7Qn74+7PZbC3+Pn8YXGfrbI5z6NAh9enTp9XHBjoTznwAhrndbhUWFqqwsNDnI7bXXHON3nzzTX344Ydn9UZ/Kg6HQ06nU1u3bvWua2ho0EcffdTqY1166aWS/nMDaLNPPvlER48e9S5v2bJF4eHhcrlcuvTSSxUaGqp9+/YpISHB5+FyuSRJl19+uT799FP169fvpH169Oih/v37q1u3bj7zHz58WF9++aXPbEOHDtVnn3120sxBQUF66aWX9LOf/Uxut1sVFRWt/rlb8sN5mn/uAQMGKDg4uFXHKSkp0dChQ/0yE9BRER+AYW63W++//7527tzpPfMhSSNHjtRf//pXHT9+/JziQ5JmzJihP//5z8rLy9MXX3yhadOmnfFLyu68807Nnz9fH3zwgfbu3astW7Zo8uTJ6tOnj4YPH+7d7/jx45o6dao+++wz/fOf/9RDDz2ku+++W0FBQYqIiNB9992nzMxMrV69WmVlZdqxY4eWLl2q1atXS5LuuusuHTp0SOnp6dq2bZvKysq0YcMG3XLLLWpsbFR4eLimTp2q2bNn691331VJSYmmTJmioCDf/1yNGTNGxcXFPpc9mgUHB+uVV15RUlKSRo0apf3795/T71P6z0d7Z86cqV27dmnt2rVaunSpZsyY0apj1NXV6aOPPtK11157zvMAHRmXXQDD3G63jh49qksuuUTR0dHe9SNHjlR1dbX3I7nnYtasWaqsrFRGRoaCgoJ066236sYbb1RVVdUpnzN69Gg9//zzWr58ub7//nv17t1bw4cP18aNGxUVFeXd75e//KUGDBiga665RvX19UpPT9fDDz/s3T5//nz16dNHOTk5+uqrr9SzZ09dfvnleuCBByT95xLTBx98oDlz5ujaa69VfX29LrzwQl133XXewHjiiSe8l2ciIiI0a9ask2ZPTU2V3W7XO++8ozFjxpz089jtdq1du1a///3vNWrUKJ+POP8YkydP1tGjR3XFFVcoODhYM2bM0G233daqY7z22muKi4tTcnLyOc0CdHQ2y18XigF0elOmTNGRI0eUl5cX6FEkScuWLdPrr7+uDRs2tOnrpKSk6LLLLjvt16efjauuukrTp0/XxIkT/TMY0EFx5gNAh3X77bfryJEjqq6ubvdfsf7dd99p3LhxSk9PD/QoQMARHwA6LLvdrj/+8Y+BHuOs9O7dW1lZWYEeA2gXuOwCAACM4tMuAADAKOIDAAAYRXwAAACjiA8AAGAU8QEAAIwiPgAAgFHEBwAAMIr4AAAARhEfAADAqP8F5vpanOoRLPsAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "478a7400-726e-4045-8cb3-ffb910aa92f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "90c12dfe-4e7f-4b7e-8ac8-ef912109f514",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c53ee867-4f0c-45a6-8b39-7a12c71e795e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Wind Speed(kmph)'].plot(kind = 'box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c2d6d5f3-fd95-429c-b194-d2c28fe330e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    some clouds\n",
       "1          Clear\n",
       "2    some clouds\n",
       "3          Clear\n",
       "4         Cloudy\n",
       "5         Cloudy\n",
       "6         Cloudy\n",
       "7           Rain\n",
       "8           Rain\n",
       "9    some clouds\n",
       "Name: Weather, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = data['Weather']\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dce6605f-7ab9-447c-9e95-f88341e85033",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Rainfall Probability (in %)</th>\n",
       "      <th>Wind Speed(kmph)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30</td>\n",
       "      <td>44</td>\n",
       "      <td>0.1</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>34</td>\n",
       "      <td>21</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>34</td>\n",
       "      <td>32</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>1.5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>32</td>\n",
       "      <td>54</td>\n",
       "      <td>1.3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>31</td>\n",
       "      <td>34</td>\n",
       "      <td>0.4</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>0.8</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Temperature  Humidity  Rainfall Probability (in %)  Wind Speed(kmph)\n",
       "0           36        32                          0.0                 8\n",
       "1           30        44                          0.1                15\n",
       "2           33        33                          0.0                10\n",
       "3           30        24                          0.0                15\n",
       "4           34        21                          0.0                10\n",
       "5           34        32                          1.2                10\n",
       "6           31        48                          1.5                 5\n",
       "7           32        54                          1.3                10\n",
       "8           31        34                          0.4                10\n",
       "9           32        40                          0.8                10"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = data.drop(['Weather','Date','Sun Rise','Sun Set'], axis = 1)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4093398e-c0e1-42c0-8f11-b2c49551424d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    some clouds\n",
       "1          Clear\n",
       "2    some clouds\n",
       "3          Clear\n",
       "4         Cloudy\n",
       "5         Cloudy\n",
       "6         Cloudy\n",
       "7           Rain\n",
       "8           Rain\n",
       "9    some clouds\n",
       "Name: Weather, dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = data['Weather']\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2e6a9577-d77d-4a1d-8500-49c22acc5c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "12fac3f3-8182-4b42-96fe-4387685d0e10",
   "metadata": {},
   "outputs": [],
   "source": [
    "std_scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7f72142a-9ab0-4e73-a55e-814d81db722e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.00366234, -0.42830393, -0.91149289, -0.82300471],\n",
       "       [-1.24551983,  0.79542159, -0.7395131 ,  1.68179223],\n",
       "       [ 0.37907125, -0.32632681, -0.91149289, -0.10734844],\n",
       "       [-1.24551983, -1.24412095, -0.91149289,  1.68179223],\n",
       "       [ 0.92060161, -1.55005233, -0.91149289, -0.10734844],\n",
       "       [ 0.92060161, -0.42830393,  1.15226459, -0.10734844],\n",
       "       [-0.70398947,  1.2033301 ,  1.66820396, -1.89648911],\n",
       "       [-0.16245911,  1.81519286,  1.32424438, -0.10734844],\n",
       "       [-0.70398947, -0.22434968, -0.22357373, -0.10734844],\n",
       "       [-0.16245911,  0.38751308,  0.46434543, -0.10734844]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_std = std_scaler.fit_transform(x)\n",
    "x_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f1a62ef3-c6af-40ab-ac45-a3b947beb2f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "81bed4aa-5e16-4a9f-beb2-ebe7f63d26a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x_std, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4863c552-2aab-496a-8b40-65d8ce55c391",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8, 4), (2, 4))"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape, x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "26d7fba6-3643-4684-9888-68a5d42ee959",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "decision_tree_model = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5aab4f80-6958-4052-b9ae-ba0343d88a97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d2f51da4-2d52-421b-9866-a1f9391c7c99",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_dt = decision_tree_model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "99b47d93-9528-40e4-a3dc-7d3bd7431777",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "50b29b1b-9d9b-4e8a-a6a6-28c473371c11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test, y_pred_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bb330bb2-2518-4b23-88e5-fa5fe1616f94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "       Clear       0.00      0.00      0.00       1.0\n",
      "        Rain       0.00      0.00      0.00       1.0\n",
      " some clouds       0.00      0.00      0.00       0.0\n",
      "\n",
      "    accuracy                           0.00       2.0\n",
      "   macro avg       0.00      0.00      0.00       2.0\n",
      "weighted avg       0.00      0.00      0.00       2.0\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred_dt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "725e7537-98af-48c0-85cc-fa8ba8e4be0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ddb0615f-876b-45fd-bc4e-72596279578f",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt_model = DecisionTreeClassifier()\n",
    "rf_model = RandomForestClassifier()\n",
    "svc_model = SVC()\n",
    "knn_model = KNeighborsClassifier()\n",
    "lr_model = LogisticRegression()\n",
    "nb_model = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b89a5c9d-bdb3-45ba-957d-00d62eab0f39",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_list = [dt_model, rf_model, svc_model,knn_model,lr_model,nb_model]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "46f1fd65-3871-443c-85ca-2a4ef617148b",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_list = []\n",
    "for model in model_list:\n",
    "    model.fit(x_train, y_train)\n",
    "    y_pred = model.predict(x_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    acc_list.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7e22010a-4bba-4ac5-aeb6-f69209e93f2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 0.5, 0.0, 0.0, 0.5, 0.0]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8c72f9f5-4b7a-4e58-a6c0-7ce4fbfdce71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DecisionTreeClassifier()</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(DecisionTreeClassifier(max_features='sqrt', r...</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SVC()</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNeighborsClassifier()</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LogisticRegression()</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>GaussianNB()</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               Model  Accuracy\n",
       "0                           DecisionTreeClassifier()       0.0\n",
       "1  (DecisionTreeClassifier(max_features='sqrt', r...       0.5\n",
       "2                                              SVC()       0.0\n",
       "3                             KNeighborsClassifier()       0.0\n",
       "4                               LogisticRegression()       0.5\n",
       "5                                       GaussianNB()       0.0"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = pd.DataFrame({'Model':model_list,\"Accuracy\":acc_list})\n",
    "model_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9a9bd9f3-82e5-4539-844f-37be00f6005b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores = [0.4 0. ]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "scores = cross_val_score(rf_model,x_std,y,cv=2, scoring='accuracy')\n",
    "print('Cross-validation scores =',scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "833c5ae9-cc0c-41d3-9f12-97aab3e3eea4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d34612b-0484-4cee-8068-c5ee34746768",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
